# -*- coding: utf-8 -*-
"""MP3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cYZdkawFA6ZftV3e--G7Haod_XupGyfa

# **Import Library**
"""

# import library
import pandas as pd
import numpy as np

# library visualization
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Read Data**"""

miniproject3 = pd.read_csv("/content/drive/MyDrive/MP3.csv")
miniproject3.head()

"""# **Overview**"""

#Dataset dimension
row, col = miniproject3.shape

print(f"Total columns: {col}")
print(f"Total rows: {row}")

miniproject3.info()

miniproject3.describe(include=["object"])

#total count from product_category_name is under 112650. its indicate there are missing value in product_category_name

miniproject3['price'].describe()

"""# **Missing Value**"""

#Check missing value
miniproject3.isnull().sum()

#show missing value
null_mask = miniproject3.isnull().any(axis=1)
null_rows = miniproject3[null_mask]

null_rows.head()

#delete missing value
miniproject3.dropna(subset=['product_category_name'], inplace=True)

miniproject3.head()

row, col = miniproject3.shape

print(f"Total columns: {col}")
print(f"Total rows: {row}")

#after delete 1603 missing value the total row become 111047

miniproject3.isnull().sum()

#there isn't missing value anymore

# Check inconsistent value for each categorical data
categori = ['customer_city', 'customer_state', 'product_category_name', 'order_status']

# Looping for unique values on each category
for i in categori:
  print(f"Unique Value from {i}:")
  print(sorted(miniproject3[i].unique()))
  print('\n')

# there is not inconsistent data

"""# **Duplicate Data**"""

duplicate = miniproject3[miniproject3.duplicated(['order_id'])]
duplicate

miniproject3[miniproject3['order_id']=='00526a9d4ebde463baee25f386963ddc']
#check order_id which has duplicate data.
#after we check for duplicate order_id values, they have different order item_ids. we can proceed to the next step

"""# **Change Data Type**"""

# order_purchase_timestamp  has type data as object. so we have to change it into date time
miniproject3['order_purchase_timestamp'] = miniproject3['order_purchase_timestamp'].astype('datetime64[ns]')

miniproject3['order_purchase_timestamp'].dtype

"""# **Data Visualization**

make a graph of total sales per month and quarter
"""

#pivot
q1_tanggal = miniproject3[['order_purchase_timestamp','order_id']]
q1_tanggal['Month Year'] = q1_tanggal['order_purchase_timestamp'].dt.strftime('%Y-%m')
pvq1 = pd.pivot_table(q1_tanggal, index='Month Year', values='order_id',aggfunc=pd.Series.nunique)
pvq1

#chart
plt.figure(figsize=(10,6))
plt.plot(pvq1.index.astype(str), pvq1['order_id'], label='order_id', marker='o')
plt.title('Total Sales per Month')
plt.xlabel('Tahun')
plt.ylabel('Penjualan')
plt.xticks(rotation=45)
#plt.grid(True)
plt.tight_layout()
plt.show()

#Total Sales per Month
miniproject3['quarter'] = miniproject3['order_purchase_timestamp'].dt.to_period('Q')

# Buat pivot table berdasarkan quarter
pvquarter = pd.pivot_table(miniproject3,index='quarter',values='order_id',aggfunc='count')
pvquarter.head(9)

#chart
plt.figure(figsize=(10,6))
plt.plot(pvquarter.index.astype(str), pvquarter['order_id'], label='order_id', marker='o')
plt.title('Total Sales per Quarter')
plt.xlabel('Tahun')
plt.ylabel('Penjualan')
plt.xticks(rotation=90)
#plt.grid(True)
plt.tight_layout()
plt.show()

"""# Total price per customer_state menggunakan bar chart


"""

#pivot
pvq2 = pd.pivot_table(miniproject3, index='customer_state', values='price',aggfunc='sum').reset_index().sort_values(by='price')
pvq2

#chart
plt.figure(figsize=(10,5))
plt.bar(pvq2['customer_state'], pvq2['price'])
plt.xlabel('customer_state')
plt.ylabel('price')
plt.title('Sales by state')
plt.xticks(rotation=90)
plt.show()

#chart
sns.barplot(x=pvq2['price'], y=pvq2['customer_state'])
plt.xlabel('price')
plt.ylabel('customer_state')
plt.title('Total price per customer_state')
plt.show()

"""# Tampilkan total penjualan (order_id) berdasarkan order status menggunakan pie chart."""

#pivot
pvq3 = pd.pivot_table(miniproject3, index='order_status', values='order_id',aggfunc=pd.Series.nunique).reset_index()
pvq3 = pvq3.sort_values(by='order_id', ascending=True)
pvq3

# Plot pie chart
plt.figure(figsize=(8, 8))
patches, _ = plt.pie(pvq3['order_id'], startangle=100, colors=plt.cm.tab10.colors)

#calculate the percentages for each categories
percentages = (pvq3['order_id'] /pvq3['order_id'].sum()) * 100
#make label based on pencentages
label = [f"{label} ({percent:.1f}%)" for label, percent in zip(pvq3.order_status, percentages)]

plt.legend(label, loc='center right', bbox_to_anchor=(1.5,0.5))
plt.title('Total Order_id by Status Order')
plt.axis('equal') # make sure the pie chart is circle
plt.show()

"""# Trend penjualan (order_id) per bulan di tahun 2018 di tiap order status menggunakan stack bar chart."""

#pivot
q4_tanggal = miniproject3[(miniproject3['order_purchase_timestamp']>= '2018-01-01') & (miniproject3['order_purchase_timestamp'] <= '2018-12-31')]
q4_tanggal['Month Year'] = q4_tanggal['order_purchase_timestamp'].dt.strftime('%Y-%m')
pvq4 = pd.pivot_table(q4_tanggal, index='Month Year',columns='order_status', values='order_id',aggfunc=pd.Series.nunique).reset_index()
pvq4

#chart
fig, ax = plt.subplots(figsize=(14, 5))
pvq4.set_index('Month Year').plot(kind='bar', stacked=True, colormap='tab20c', ax=ax)
plt.xlabel("Month Year")
plt.ylabel("Total Orders")
plt.title("Stacked Bar Chart")
plt.xticks(rotation=0)
plt.show()